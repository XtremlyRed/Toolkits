<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Toolkits.Core</name>
    </assembly>
    <members>
        <member name="T:Toolkits.CommandBase">
            <summary>
            a class of <see cref="T:Toolkits.CommandBase"/>
            </summary>
        </member>
        <member name="P:Toolkits.CommandBase.CommandName">
             <summary>
            
             </summary>
        </member>
        <member name="P:Toolkits.CommandBase.IsExecuting">
            <summary>
            Gets or sets a value indicating whether this instance is executing.
            </summary>
            <value>
              <c>true</c> if this instance is executing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Toolkits.CommandBase.RaiseCanExecuteChanged">
            <summary>
            Raises the can execute changed.
            </summary>
        </member>
        <member name="E:Toolkits.CommandBase.CanExecuteChanged">
            <summary>
            can execute changed event
            </summary>
        </member>
        <member name="M:Toolkits.CommandBase.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal toType the current object.
            </summary>
            <param name="obj"> The object toType compare with the current object.</param>
            <returns>true if the specified object is equal toType the current object; otherwise, false.</returns>
        </member>
        <member name="M:Toolkits.CommandBase.GetHashCode">
            <summary>
             Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Toolkits.CommandBase.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="E:Toolkits.CommandBase.PropertyChanged">
            <summary>
            property changed event
            </summary>
        </member>
        <member name="M:Toolkits.CommandBase.RaisePropertyChanged(System.String)">
            
             <summary>
             raise property changed
             </summary>
             <param name="propertyName"></param>
        </member>
        <member name="T:Toolkits.IRelayCommand">
            <summary>
            <see cref="T:Toolkits.IRelayCommand"/>
            </summary>
        </member>
        <member name="M:Toolkits.IRelayCommand.CanExecute">
            <summary>
            can execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IRelayCommand.Execute">
            <summary>
            execute command
            </summary>
        </member>
        <member name="T:Toolkits.RelayCommand">
            <summary>
            RelayCommand
            </summary>
        </member>
        <member name="M:Toolkits.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            create a new command
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Toolkits.RelayCommand.#ctor(System.String,System.Action,System.Func{System.Boolean})">
            <summary>
            create a new command
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Toolkits.RelayCommand.CanExecute(System.Object)">
            <summary>
            Determines whether this instance can execute the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>
              <c>true</c> if this instance can execute the specified parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Toolkits.RelayCommand.Execute(System.Object)">
            <summary>
            Executes the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
        </member>
        <member name="M:Toolkits.RelayCommand.CanExecute">
            <summary>
             can cexcute command
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolkits.RelayCommand.Execute">
            <summary>
            execute sync command
            </summary>
        </member>
        <member name="F:Toolkits.RelayCommand.globalCommandExceptionCallback">
             <summary>
            
             </summary>
        </member>
        <member name="M:Toolkits.RelayCommand.SetGlobalCommandExceptionCallback(System.Action{System.String,System.Exception})">
            <summary>
            set global command exception callback
            </summary>
            <param name="globalCommandExceptionCallback"></param>
        </member>
        <member name="M:Toolkits.RelayCommand.op_Implicit(System.ValueTuple{System.Action,System.String})~Toolkits.RelayCommand">
            <summary>
            create relaycommand from  <see cref="T:System.Action"/> <paramref name="commandAction"/>
            </summary>
            <param name="commandAction"></param>
        </member>
        <member name="M:Toolkits.RelayCommand.op_Implicit(System.Action)~Toolkits.RelayCommand">
            <summary>
            create relaycommand from  <see cref="T:System.Action"/> <paramref name="commandAction"/>
            </summary>
            <param name="commandAction"></param>
        </member>
        <member name="T:Toolkits.IRelayCommandAsync">
            <summary>
            <see cref="T:Toolkits.IRelayCommandAsync"/>
            </summary>
        </member>
        <member name="M:Toolkits.IRelayCommandAsync.CanExecute">
            <summary>
            can execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IRelayCommandAsync.ExecuteAsync">
            <summary>
            execute command async
            </summary>
            <returns></returns>
        </member>
        <member name="T:Toolkits.RelayCommandAsync">
            <summary>
            <see cref="T:Toolkits.RelayCommandAsync"/>
            </summary>
        </member>
        <member name="M:Toolkits.RelayCommandAsync.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
            create a new command
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Toolkits.RelayCommandAsync.#ctor(System.String,System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
            create a new command
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Toolkits.RelayCommandAsync.CanExecute">
            <summary>
            can execute
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolkits.RelayCommandAsync.ExecuteAsync">
            <summary>
            execute command async
            </summary>
            <returns></returns>
        </member>
        <member name="M:Toolkits.RelayCommandAsync.op_Implicit(System.Func{System.Threading.Tasks.Task})~Toolkits.RelayCommandAsync">
             <summary>
            
             </summary>
             <param name="commandAction"></param>
        </member>
        <member name="M:Toolkits.RelayCommandAsync.op_Implicit(System.ValueTuple{System.Func{System.Threading.Tasks.Task},System.String})~Toolkits.RelayCommandAsync">
             <summary>
            
             </summary>
             <param name="commandAction"></param>
        </member>
        <member name="T:Toolkits.IRelayCommandAsync`1">
            <summary>
            <see cref="T:Toolkits.IRelayCommandAsync`1"/>
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:Toolkits.IRelayCommandAsync`1.CanExecute(`0)">
            <summary>
            can execute command
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IRelayCommandAsync`1.ExecuteAsync(`0)">
            <summary>
            execute command async
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:Toolkits.RelayCommandAsync`1">
            <summary>
            <see cref="T:Toolkits.RelayCommandAsync`1"/>
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:Toolkits.RelayCommandAsync`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Boolean})">
            <summary>
            create a new command
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Toolkits.RelayCommandAsync`1.#ctor(System.String,System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Boolean})">
            <summary>
            create a new command
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Toolkits.RelayCommandAsync`1.CanExecute(`0)">
            <summary>
            can execute with <typeparamref name="TParameter"/> <paramref name="parameter"/>
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.RelayCommandAsync`1.ExecuteAsync(`0)">
            <summary>
            execute command with <typeparamref name="TParameter"/> <paramref name="parameter"/> async
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.RelayCommandAsync`1.op_Implicit(System.Func{`0,System.Threading.Tasks.Task})~Toolkits.RelayCommandAsync{`0}">
             <summary>
            
             </summary>
             <param name="commandAction"></param>
        </member>
        <member name="M:Toolkits.RelayCommandAsync`1.op_Implicit(System.ValueTuple{System.Func{`0,System.Threading.Tasks.Task},System.String})~Toolkits.RelayCommandAsync{`0}">
             <summary>
            
             </summary>
             <param name="commandAction"></param>
        </member>
        <member name="T:Toolkits.IRelayCommand`1">
            <summary>
            <see cref="T:Toolkits.IRelayCommand`1"/>
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:Toolkits.IRelayCommand`1.CanExecute(`0)">
            <summary>
            can execute command
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IRelayCommand`1.Execute(`0)">
            <summary>
            execute command
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Toolkits.RelayCommand`1">
            <summary>
            RelayCommand
            </summary>
            <typeparam name="TParameter"></typeparam>
        </member>
        <member name="M:Toolkits.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            create a new command
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Toolkits.RelayCommand`1.#ctor(System.String,System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            create a new command
            </summary>
            <param name="execute"></param>
            <param name="canExecute"></param>
        </member>
        <member name="M:Toolkits.RelayCommand`1.CanExecute(System.Object)">
             <summary>
            
             </summary>
             <param name="parameter"></param>
             <returns></returns>
        </member>
        <member name="M:Toolkits.RelayCommand`1.Execute(System.Object)">
             <summary>
            
             </summary>
             <param name="parameter"></param>
        </member>
        <member name="M:Toolkits.RelayCommand`1.CanExecute(`0)">
            <summary>
            can execute with <typeparamref name="TParameter"/> <paramref name="parameter"/>
            </summary>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.RelayCommand`1.Execute(`0)">
            <summary>
            execute command with <typeparamref name="TParameter"/> <paramref name="parameter"/>
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Toolkits.RelayCommand`1.op_Implicit(System.Action{`0})~Toolkits.RelayCommand{`0}">
             <summary>
            
             </summary>
             <param name="commandAction"></param>
        </member>
        <member name="M:Toolkits.RelayCommand`1.op_Implicit(System.ValueTuple{System.Action{`0},System.String})~Toolkits.RelayCommand{`0}">
             <summary>
            
             </summary>
             <param name="commandAction"></param>
        </member>
        <member name="T:Toolkits.AsyncLocker">
             <summary>
            
             </summary>
             <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Toolkits.AsyncLocker.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Toolkits.AsyncLocker"/> class.
            </summary>
            <param name="initialCount">The initial count.</param>
            <param name="maxCount">The maximum count.</param>
        </member>
        <member name="M:Toolkits.AsyncLocker.Release">
            <summary>
            Releases this instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="P:Toolkits.AsyncLocker.IsIdle">
            <summary>
            Gets a value indicating whether this instance is idle.
            </summary>
            <value>
              <c>true</c> if this instance is idle; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Toolkits.AsyncLocker.ReleaseAll">
            <summary>
            Releases this instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.Wait">
            <summary>
            Waits this instance.
            </summary>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.Wait(System.Int32)">
            <summary>
            Waits the specified milliseconds timeout.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.Wait(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits the specified milliseconds timeout.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.Wait(System.TimeSpan)">
            <summary>
            Waits the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.Wait(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits the specified timeout.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.Wait(System.Threading.CancellationToken)">
            <summary>
            Waits the specified cancellation token.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.WaitAsync">
            <summary>
            Waits the asynchronous.
            </summary>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.WaitAsync(System.Int32)">
            <summary>
            Waits the asynchronous.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.WaitAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
            Waits the asynchronous.
            </summary>
            <param name="millisecondsTimeout">The milliseconds timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Waits the asynchronous.
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.WaitAsync(System.TimeSpan)">
            <summary>
            Waits the asynchronous.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Waits the asynchronous.
            </summary>
            <param name="timeout">The timeout.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException">AsyncLocker</exception>
        </member>
        <member name="M:Toolkits.AsyncLocker.Dispose">
            <summary>
            dispose
            </summary>
        </member>
        <member name="T:Toolkits.Folder">
            <summary>
            <see cref="T:Toolkits.Folder"/>
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Desktop">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Desktop"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Programs">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Programs"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.MyDocuments">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.MyDocuments"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Favorites">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Favorites"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Startup">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Startup"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Recent">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Recent"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.SendTo">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.SendTo"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.StartMenu">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.StartMenu"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.MyMusic">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.MyMusic"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.MyVideos">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.MyVideos"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.DesktopDirectory">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.DesktopDirectory"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.MyComputer">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.MyComputer"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.NetworkShortcuts">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.NetworkShortcuts"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Fonts">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Fonts"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Templates">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Templates"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonStartMenu">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonStartMenu"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonPrograms">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonPrograms"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonStartup">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonStartup"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonDesktopDirectory">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonDesktopDirectory"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.ApplicationData">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.ApplicationData"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.PrinterShortcuts">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.PrinterShortcuts"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.LocalApplicationData">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.LocalApplicationData"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.InternetCache">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.InternetCache"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Cookies">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Cookies"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.History">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.History"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonApplicationData">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonApplicationData"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Windows">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Windows"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.System">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.System"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.ProgramFiles">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.ProgramFiles"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.MyPictures">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.MyPictures"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.UserProfile">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.UserProfile"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.SystemX86">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.SystemX86"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.ProgramFilesX86">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.ProgramFilesX86"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonProgramFiles">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonProgramFiles"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonProgramFilesX86">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonProgramFilesX86"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonTemplates">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonTemplates"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonDocuments">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonDocuments"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonAdminTools">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonAdminTools"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.AdminTools">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.AdminTools"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonMusic">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonMusic"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonPictures">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonPictures"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonVideos">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonVideos"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Resources">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.Resources"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.LocalizedResources">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.LocalizedResources"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CommonOemLinks">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CommonOemLinks"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.CDBurning">
            <summary>
            <see cref="F:System.Environment.SpecialFolder.CDBurning"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.Current">
            <summary>
            <see cref="P:System.Environment.CurrentDirectory"/> folder
            </summary>
        </member>
        <member name="F:Toolkits.Folder.AutoCreateFolder">
            <summary>
            auto create folder when not exist
            </summary>
        </member>
        <member name="M:Toolkits.Folder.#ctor(System.String)">
            <summary>
            share a new <see cref="T:Toolkits.Folder"/> folder
            </summary>
        </member>
        <member name="M:Toolkits.Folder.Combine(System.String[])">
            <summary>
            combines four strings into a path.
            </summary>
            <param name="paths">an array of parts of the path.</param>
            <Exception cref="T:System.ArgumentException">one of the strings in the array contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars.</Exception>
            <Exception cref="T:System.ArgumentNullException">one of the strings in the array is null.</Exception>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:Toolkits.Folder.CombinePaths(System.String[])">
            <summary>
            combines four strings into a path.
            </summary>
            <param name="paths">an array of parts of the path.</param>
            <Exception cref="T:System.ArgumentException">one of the strings in the array contains one or more of the invalid characters defined in System.IO.Path.GetInvalidPathChars.</Exception>
            <Exception cref="T:System.ArgumentNullException">one of the strings in the array is null.</Exception>
            <returns>The combined paths.</returns>
        </member>
        <member name="M:Toolkits.Folder.op_Implicit(Toolkits.Folder)~System.String">
            <summary>
            get folder string from <paramref name="easyFolder"/>
            </summary>
            <param name="easyFolder"></param>
        </member>
        <member name="M:Toolkits.Folder.TryCreateFolder">
            <summary>
             Create Directory If Not Exists
            </summary>
        </member>
        <member name="M:Toolkits.Folder.GetRelativePath(System.String,System.String)">
            <summary>
            Gets the relative path.
            </summary>
            <param name="basePath">The base path.</param>
            <param name="targetPath">The target path.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Folder.op_Implicit(System.String)~Toolkits.Folder">
            <summary>
            create <see cref="T:Toolkits.Folder"/> from string
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:Toolkits.Folder.GetHashCode">
            <summary>
            get <see cref="T:Toolkits.Folder"/> hash code
            </summary>
            <returns>hash code</returns>
        </member>
        <member name="M:Toolkits.Folder.Equals(System.Object)">
            <summary>
            compare two objects for equality
            </summary>
            <param name="obj">compare object</param>
            <returns>compare result</returns>
        </member>
        <member name="M:Toolkits.Folder.Equals(Toolkits.Folder)">
            <summary>
            compare two objects for equality
            </summary>
            <param name="obj">compare object</param>
            <returns>compare result</returns>
        </member>
        <member name="M:Toolkits.Folder.op_Equality(Toolkits.Folder,Toolkits.Folder)">
            <summary>
            compare two objects for equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Folder.op_Inequality(Toolkits.Folder,Toolkits.Folder)">
            <summary>
            compare two objects for not equality
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Toolkits.Ref`1">
             <summary>
            
             </summary>
        </member>
        <member name="P:Toolkits.Ref`1.Value">
            <summary>
            current value.
            </summary>
        </member>
        <member name="M:Toolkits.Ref`1.Swap(`0)">
            <summary>
            Swaps the specified new value.
            </summary>
            <param name="newValue">The new value.</param>
        </member>
        <member name="M:Toolkits.Ref`1.op_Implicit(Toolkits.Ref{`0})~`0">
            <summary>
            Performs an implicit conversion from <see cref="T:Toolkits.Ref`1"/> to  <paramref name="r"/>.
            </summary>
            <param name="r">The r.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:Toolkits.TypeConvertExtensions">
            <summary>
            class of <see cref="T:Toolkits.TypeConvertExtensions"/>
            </summary>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.TryConvertTo``1(System.Object,``0@)">
            <summary>
            Tries to.
            </summary>
            <typeparam name="To">The type of the o.</typeparam>
            <param name="object">The object.</param>
            <param name="toValue">ConvertTo value.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.ConvertTo``1(System.Object,System.ComponentModel.TypeConverter)">
            <summary>
            cast object value to target Type
            <para>The Type conversion process will use method <see cref="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)"/></para>
            </summary>
            <typeparam fieldName="TTo"></typeparam>
            <param fieldName="value">object value</param>
            <returns>cast success</returns>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.ConvertTo(System.Object,System.Type,System.ComponentModel.TypeConverter)">
            <summary>
            ConvertTo the specified to type.
            </summary>
            <param name="object">The object.</param>
            <param name="toType">ConvertTo type.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
            <exception cref="T:System.InvalidCastException">
            value is null
            or
            can not convert {@object ?? "null"} to {ReflectionExtensions.GetTypeName(toType)}
            </exception>
            <exception cref="T:System.ArgumentNullException">toType</exception>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.ConvertTo``2(``0,System.Func{``0,``1})">
            <summary>
            cast object value to target Type
            </summary>
            <typeparam fieldName="TTo"></typeparam>
            <param fieldName="value">object value</param>
            <returns>cast success</returns>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.AppendConverter``2(System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Appends the converter.
            </summary>
            <typeparam name="TFrom">The type of from.</typeparam>
            <typeparam name="TTo">The type of to.</typeparam>
            <param name="lambdaToConverter">The lambda converter.</param>
            <param name="labmbdaFromConverter"></param>
        </member>
        <member name="T:Toolkits.TypeConvertExtensions.TypeConvertGeneric`2">
            <summary>
            target type converter
            </summary>
            <typeparam name="From"></typeparam>
            <typeparam name="To"></typeparam>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.TypeConvertGeneric`2.#ctor(System.Func{`0,`1},System.Func{`1,`0})">
            <summary>
            create a new <see cref="T:Toolkits.TypeConvertExtensions.TypeConvertGeneric`2"/>
            </summary>
            <param name="labmbdaFromConverter"></param>
            <param name="labmbdaToConverter"></param>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.TypeConvertGeneric`2.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            can convert from
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.TypeConvertGeneric`2.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            convert from
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.TypeConvertGeneric`2.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            can convert to
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.TypeConvertExtensions.TypeConvertGeneric`2.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            convert to
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:Toolkits.DateTimeExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetMinuteBegin(System.DateTime)">
            <summary>
            Gets the minute begin.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetMinuteEnd(System.DateTime)">
            <summary>
            Gets the minute end.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetHourBegin(System.DateTime)">
            <summary>
            Gets the hour begin.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetHourEnd(System.DateTime)">
            <summary>
            Gets the hour end.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetDayBegin(System.DateTime)">
            <summary>
            Gets the day begin.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetDayEnd(System.DateTime)">
            <summary>
            Gets the day end.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetMonthBegin(System.DateTime)">
            <summary>
            Gets the month begin.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetMonthEnd(System.DateTime)">
            <summary>
            Gets the month end.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetYearBegin(System.DateTime)">
            <summary>
            Gets the year begin.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.DateTimeExtensions.GetYearEnd(System.DateTime)">
            <summary>
            Gets the year end.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:Toolkits.TimeMeasureExtensions">
             <summary>
            
             </summary>
             2024/1/29 14:00
        </member>
        <member name="M:Toolkits.TimeMeasureExtensions.TimeMeasure(System.Action,System.Action{System.Int32})">
            <summary>
            a stopwatch is used to obtain the execution time of a program
            </summary>
            <param name="invoker"></param>
            <param name="timerCallback"></param>
        </member>
        <member name="M:Toolkits.TimeMeasureExtensions.TimeMeasure``1(System.Func{``0},System.Action{System.Int32})">
            <summary>
            a stopwatch is used to obtain the execution time of a program
            </summary>
            <param name="invoker"></param>
            <param name="timerCallback"></param>
        </member>
        <member name="M:Toolkits.TimeMeasureExtensions.TimeMeasureAsync(System.Func{System.Threading.Tasks.Task},System.Action{System.Int32})">
            <summary>
            a stopwatch is used to obtain the execution time of a program
            </summary>
            <param name="invoker"></param>
            <param name="timerCallback"></param>
        </member>
        <member name="M:Toolkits.TimeMeasureExtensions.TimeMeasureAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Int32})">
            <summary>
            a stopwatch is used to obtain the execution time of a program
            </summary>
            <param name="invoker"></param>
            <param name="timerCallback"></param>
        </member>
        <member name="T:Toolkits.EnumerableExtensions">
            <summary>
            enumerable extensions
            </summary>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether [is null or empty].
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if [is null or empty] [the specified source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.IsNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether [is not null or empty].
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <returns>
              <c>true</c> if [is not null or empty] [the specified source]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <summary>
            Wheres if.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="condition">if set to <c>true</c> [condition].</param>
            <param name="filter">The filter.</param>
            <returns></returns>
            2024/2/1 10:59
            <exception cref="T:System.ArgumentNullException">
            source
            or
            filter
            </exception>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Get the position of an element in the collection and only return the position of the first matching element
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
            2024/3/6 9:02
            <exception cref="T:System.ArgumentNullException">
            source
            or
            filter
            </exception>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.IndexOfMany``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
             Get the position of elements in the collection and return the positions of all matching elements
            </summary>
            <typeparam name="TSource">The type of the source.</typeparam>
            <param name="source">The source.</param>
            <param name="filter">The filter.</param>
            <returns></returns>
            2024/3/6 9:03
            <exception cref="T:System.ArgumentNullException">
            source
            or
            filter
            </exception>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.Paginate``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            paging
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
            2024/2/1 11:00
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Fors the each.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Fors the each asynchronous.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})">
            <summary>
            Fors the each asynchronous.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
            Fors the each.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>
            Fors the each.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{System.Exception})">
            <summary>
            Tries for each.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
            <param name="exceptionCallback">The exception callback.</param>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.TryForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32},System.Action{System.Exception})">
            <summary>
            Tries for each.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
            <param name="exceptionCallback">The exception callback.</param>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.TryForEach``1(System.Collections.IEnumerable,System.Action{``0},System.Action{System.Exception})">
            <summary>
            Tries for each.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
            <param name="exceptionCallback">The exception callback.</param>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.Sort``1(System.Collections.Generic.List{``0},System.Func{``0,System.IComparable},System.Boolean)">
            <summary>
            Sorts the specified comparer.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="source">The source.</param>
            <param name="comparer">The comparer.</param>
            <param name="isDescending">if set to <c>true</c> [is descending].</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            comparer
            </exception>
        </member>
        <member name="T:Toolkits.EnumerableExtensions.DescendingSortIComparer`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.DescendingSortIComparer`1.#ctor(System.Func{`0,System.IComparable})">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="T:Toolkits.EnumerableExtensions.SortIComparer`1">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.SortIComparer`1.#ctor(System.Func{`0,System.IComparable})">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
        </member>
        <member name="M:Toolkits.EnumerableExtensions.ToReferenceArray``1(System.Collections.Generic.List{``0})">
            <summary>
            Ases the array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <returns></returns>
            2023/12/18 13:50
        </member>
        <member name="M:Toolkits.EnumerableExtensions.Clear``1(System.Collections.Concurrent.IProducerConsumerCollection{``0})">
            <summary>
            Clears the specified source.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
        </member>
        <member name="T:Toolkits.MathExtensions">
            <summary>
            simple math extensions
            </summary>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.Int64,System.Int64,System.Int64)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.Byte,System.Byte,System.Byte)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.Int16,System.Int16,System.Int16)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.Single,System.Single,System.Single)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.Decimal,System.Decimal,System.Decimal)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.Double,System.Double,System.Double)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.SByte,System.SByte,System.SByte)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.FromRange(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            get value from range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.Byte,System.Byte,System.Byte,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.Int16,System.Int16,System.Int16,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.Decimal,System.Decimal,System.Decimal,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.UInt64,System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.UInt32,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.SByte,System.SByte,System.SByte,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.InRange(System.UInt16,System.UInt16,System.UInt16,System.Boolean)">
            <summary>
            check value in range
            </summary>
            <param name="value">current value</param>
            <param name="minValue">min value</param>
            <param name="maxValue">max value</param>
            <param name="includeEquals"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Abs(System.Int16)">
            <summary>
             get absolute value
            </summary>
            <param name="value">current value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Abs(System.SByte)">
            <summary>
             get absolute value
            </summary>
            <param name="value">current value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Abs(System.Int32)">
            <summary>
             get absolute value
            </summary>
            <param name="value">current value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Abs(System.Int64)">
            <summary>
             get  absolute value
            </summary>
            <param name="value">current value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Abs(System.Single)">
            <summary>
             get absolute value
            </summary>
            <param name="value">current value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Abs(System.Double)">
            <summary>
             get absolute value
            </summary>
            <param name="value">current value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Abs(System.Decimal)">
            <summary>
             get absolute value
            </summary>
            <param name="value">current value</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Round(System.Decimal,System.Int32,System.MidpointRounding)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="decimals"></param>
             <param name="mode"></param>
             <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Round(System.Double,System.Int32,System.MidpointRounding)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="decimals"></param>
             <param name="mode"></param>
             <returns></returns>
        </member>
        <member name="M:Toolkits.MathExtensions.Round(System.Single,System.Int32,System.MidpointRounding)">
             <summary>
            
             </summary>
             <param name="value"></param>
             <param name="decimals"></param>
             <param name="mode"></param>
             <returns></returns>
        </member>
        <member name="T:Toolkits.ReflectionExtensions">
            <summary>
            reflection extensions
            </summary>
            2024/1/26 13:24
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetValue(System.Object,System.String)">
            <summary>
            Get Member Value
            </summary>
            <param name="obj"></param>
            <param name="propertyOrFieldPath"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.SetValue(System.Object,System.String,System.Object)">
             <summary>
            
             </summary>
             <param name="obj"></param>
             <param name="propertyOrFieldPath"></param>
             <param name="value"></param>
             <returns></returns>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.FindMemberValueIgnoreCase(System.Object,System.String,System.Boolean,System.Object)">
            <summary>
            Find Member value IgnoreCase
            </summary>
            <param name="instance"></param>
            <param name="memberName"></param>
            <param name="isSetValue"></param>
            <param name="setValue"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetExplicitName(System.Type)">
            <summary>
            get type string name
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetAssemblyResource(System.Reflection.Assembly,System.String,System.StringComparison)">
            <summary>
            Gets the assembly resource.
            </summary>
            <param name="assembly">The assembly.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="stringComparison">The string comparison.</param>
            <returns></returns>
            2023/11/25 13:52
        </member>
        <member name="M:Toolkits.ReflectionExtensions.InvokeMethod``1(``0,System.String,System.Object[])">
            <summary>
            execute method through reflection
            </summary>
            <typeparam name="Target"></typeparam>
            <param name="target"></param>
            <param name="methodName"></param>
            <param name="params"></param>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.InvokeMethodAsync``1(``0,System.String,System.Object[])">
            <summary>
            execute method through reflection
            </summary>
            <typeparam name="Target"></typeparam>
            <param name="target"></param>
            <param name="methodName"></param>
            <param name="params"></param>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            execute method through reflection
            </summary>
            <typeparam name="Target"></typeparam>
            <param name="target"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.SetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            Sets the property value.
            </summary>
            <typeparam name="Target">The type of the arget.</typeparam>
            <param name="target">The target.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            2023/11/25 13:53
        </member>
        <member name="M:Toolkits.ReflectionExtensions.SetPropertyValue``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},``1)">
            <summary>
            Sets the property value.
            </summary>
            <typeparam name="TObject">The type of the object.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <param name="target">The target.</param>
            <param name="filter">The filter.</param>
            <param name="value">The value.</param>
            2024/2/19 14:33
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetPropertyName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             get proprety name from expression
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TPropertyType"></typeparam>
            <param name="propertySelector">property Selector</param>
            <returns></returns>
            <Exception cref="T:System.ArgumentNullException"></Exception>
        </member>
        <member name="F:Toolkits.ReflectionExtensions.attributeMapper">
            <summary>
            all exist attribute map
            </summary>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetEnumAttribute``1(System.Enum)">
            <summary>
            get all attributes from <see cref="T:System.Enum"/>
            </summary>
            <param name="enumValue"><see cref="T:System.Enum"/></param>
            <returns></returns>
            <Exception cref="T:System.ArgumentNullException"></Exception>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetPropertyAttributes``2(System.Boolean)">
            <summary>
            Gets the property attributes.
            </summary>
            <typeparam name="TObjectType">The type of the object type.</typeparam>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns></returns>
            2024/1/26 11:59
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetFieldAttributes``2">
            <summary>
            Gets the field attributes.
            </summary>
            <typeparam name="TObjectType">The type of the object type.</typeparam>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <returns></returns>
            2024/1/26 11:59
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetEnumAttributes``2">
            <summary>
            Get the<see cref="T:System.Attribute"/>of the specified type for the enum type
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Toolkits.ReflectionExtensions.GetEnumAttributes``3(System.Func{``1,``2})">
            <summary>
            Get the<see cref="T:System.Attribute"/>of the specified type for the enum type
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="TAttribute"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="selector"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Toolkits.StopwatchExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="M:Toolkits.StopwatchExtensions.Measure(System.Diagnostics.Stopwatch,System.Action,System.Boolean)">
             <summary>
            
             </summary>
             <param name="stopwatch"></param>
             <param name="action"></param>
             <param name="stopwatchRestart"></param>
             <returns></returns>
             <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Toolkits.StopwatchExtensions.Measure``1(System.Diagnostics.Stopwatch,System.Func{``0},System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="stopwatch"></param>
             <param name="action"></param>
             <param name="stopwatchRestart"></param>
             <returns></returns>
             <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Toolkits.StopwatchExtensions.MeasureAsync``1(System.Diagnostics.Stopwatch,System.Func{System.Threading.Tasks.Task{``0}},System.Boolean)">
             <summary>
            
             </summary>
             <typeparam name="T"></typeparam>
             <param name="stopwatch"></param>
             <param name="action"></param>
             <param name="stopwatchRestart"></param>
             <returns></returns>
             <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Toolkits.StopwatchExtensions.MeasureAsync(System.Diagnostics.Stopwatch,System.Func{System.Threading.Tasks.Task},System.Boolean)">
             <summary>
            
             </summary>
             <param name="stopwatch"></param>
             <param name="action"></param>
             <param name="stopwatchRestart"></param>
             <returns></returns>
             <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:Toolkits.StringExtensions">
            <summary>
            string extensions
            </summary>
            2023/12/19 15:22
        </member>
        <member name="M:Toolkits.StringExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
            Check if the string is <see langword="null"/> or a whitespace character
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Toolkits.StringExtensions.IsNullOrWhiteSpaceUse(System.String,System.String)">
            <summary>
            If the current string <paramref name="value"/> is <see langword="null"/> or a blank character, use <paramref name="defaultValue"/>
            </summary>
            <param name="value"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.StringExtensions.IsNullOrWhiteSpaceUse(System.String,System.Exception)">
            <summary>
            If the current string <paramref name="value"/> is <see langword="null"/> or a blank character, use <paramref name="exception"/>
            </summary>
            <param name="value"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.StringExtensions.IsNotNullOrWhiteSpace(System.String)">
            <summary>
            Check if the string is not <see langword="null"/> or a whitespace character
            </summary>
            <param name="value">The value.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Toolkits.StringExtensions.IsNullOrEmptyUse(System.String,System.String)" -->
        <member name="M:Toolkits.StringExtensions.IsNullOrEmptyUse(System.String,System.Exception)">
            <summary>
            If the current string <paramref name="value"/> is <see langword="null"/> or empty, use <paramref name="exception"/>
            </summary>
            <param name="value"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            Check if the string is <see langword="null"/>or empty
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Toolkits.StringExtensions.IsNotNullOrEmpty(System.String)">
            <summary>
            Check if the string is not <see langword="null"/> or empty
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Toolkits.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Joins the specified interval symbol.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="intervalSymbol">The interval symbol.</param>
            <returns></returns>
            2023/12/19 15:23
        </member>
        <member name="M:Toolkits.StringExtensions.Join``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Joins the specified selector.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <param name="selector">The selector.</param>
            <param name="intervalSymbol">The interval symbol.</param>
            <returns></returns>
            2023/12/19 15:24
            <exception cref="T:System.ArgumentNullException">
            source
            or
            selector
            or
            intervalSymbol
            </exception>
        </member>
        <member name="T:Toolkits.SynchronizationContextExtensions">
             <summary>
            
             </summary>
             2023/12/14 14:22
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.Post(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Posts the specified synchronization context.
            </summary>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="action">The action.</param>
            <returns></returns>
            2023/11/29 10:17
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.Post``1(System.Threading.SynchronizationContext,``0,System.Action{``0})">
            <summary>
            Posts the specified synchronization context.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue">The target value.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
            2023/12/14 10:44
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.Post``2(System.Threading.SynchronizationContext,``0,``1,System.Action{``0,``1})">
            <summary>
            Posts the specified target value1.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue1">The target value1.</param>
            <param name="targetValue2">The target value2.</param>
            <param name="callback">The callback.</param>
            2024/2/2 10:03
            <exception cref="T:System.ArgumentNullException">
            callback
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.Post``3(System.Threading.SynchronizationContext,``0,``1,``2,System.Action{``0,``1,``2})">
            <summary>
            Posts the specified target value1.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue1">The target value1.</param>
            <param name="targetValue2">The target value2.</param>
            <param name="targetValue3">The target value3.</param>
            <param name="callback">The callback.</param>
            2024/2/2 10:03
            <exception cref="T:System.ArgumentNullException">
            callback
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync(System.Threading.SynchronizationContext,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Posts the asynchronous.
            </summary>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="action">The action.</param>
            2023/12/14 14:27
            <exception cref="T:System.ArgumentNullException">
            action
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``1(System.Threading.SynchronizationContext,``0,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue">The target value.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``2(System.Threading.SynchronizationContext,``0,``1,System.Func{``0,``1,System.Threading.Tasks.Task})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue1">The target value1.</param>
            <param name="targetValue2">The target value2.</param>
            <param name="callback">The callback.</param>
            2024/2/2 10:05
            <exception cref="T:System.ArgumentNullException">
            callback
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``3(System.Threading.SynchronizationContext,``0,``1,``2,System.Func{``0,``1,``2,System.Threading.Tasks.Task})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue1">The target value1.</param>
            <param name="targetValue2">The target value2.</param>
            <param name="targetValue3">The target value3.</param>
            <param name="callback">The callback.</param>
            2024/2/2 10:05
            <exception cref="T:System.ArgumentNullException">
            callback
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``1(System.Threading.SynchronizationContext,System.Func{``0})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="TResult"></typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``2(System.Threading.SynchronizationContext,``0,System.Func{``0,``1})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue1">The target value1.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
            2024/2/21 18:01
            <exception cref="T:System.ArgumentNullException">
            callback
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``3(System.Threading.SynchronizationContext,``0,``1,System.Func{``0,``1,``2})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue1">The target value1.</param>
            <param name="targetValue2">The target value2.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
            2024/2/21 17:48
            <exception cref="T:System.ArgumentNullException">
            callback
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``4(System.Threading.SynchronizationContext,``0,``1,``2,System.Func{``0,``1,``2,``3})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="targetValue1">The target value1.</param>
            <param name="targetValue2">The target value2.</param>
            <param name="targetValue3">The target value3.</param>
            <param name="callback">The callback.</param>
            <returns></returns>
            2024/2/21 18:10
            <exception cref="T:System.ArgumentNullException">
            callback
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync(System.Threading.SynchronizationContext,System.Action)">
            <summary>
            Posts the specified synchronization context.
            </summary>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="action">The action.</param>
            <returns></returns>
            2023/11/29 10:17
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``1(System.Threading.SynchronizationContext,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``2(System.Threading.SynchronizationContext,``0,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="t1">The t1.</param>
            <param name="action">The action.</param>
            <returns></returns>
            2024/3/1 15:41
            <exception cref="T:System.ArgumentNullException">
            action
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``3(System.Threading.SynchronizationContext,``0,``1,System.Func{``0,``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="action">The action.</param>
            <returns></returns>
            2024/2/22 9:10
            <exception cref="T:System.ArgumentNullException">
            action
            or
            synchronizationContext
            </exception>
        </member>
        <member name="M:Toolkits.SynchronizationContextExtensions.PostAsync``4(System.Threading.SynchronizationContext,``0,``1,``2,System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}})">
            <summary>
            Posts the asynchronous.
            </summary>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="TResult">The type of the result.</typeparam>
            <param name="synchronizationContext">The synchronization context.</param>
            <param name="t1">The t1.</param>
            <param name="t2">The t2.</param>
            <param name="t3">The t3.</param>
            <param name="action">The action.</param>
            <returns></returns>
            2024/2/22 9:08
            <exception cref="T:System.ArgumentNullException">
            action
            or
            synchronizationContext
            </exception>
        </member>
        <member name="T:Toolkits.TaskExtensions">
            <summary>
            task  extensions
            </summary>
            2024/1/29 14:01
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter(System.TimeSpan)">
            <summary>
            Gets the awaiter.
            </summary>
            <param name="tasks">The tasks.</param>
            <returns></returns>
            2023/12/12 13:52
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <summary>
            Gets the awaiter.
            </summary>
            <param name="tasks">The tasks.</param>
            <returns></returns>
            2023/11/27 8:02
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Gets the awaiter.
            </summary>
            <param name="tasks">The tasks.</param>
            <returns></returns>
            2023/11/27 8:02
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter``1(System.ValueTuple{System.Threading.Tasks.Task{``0},System.TimeSpan,System.String})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="taskOpt">The task opt.</param>
            <returns></returns>
            2024/1/2 16:00
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter``1(System.ValueTuple{System.Threading.Tasks.Task{``0},System.TimeSpan})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="taskOpt">The task opt.</param>
            <returns></returns>
            2024/1/2 16:00
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter(System.ValueTuple{System.Threading.Tasks.Task,System.TimeSpan,System.String})">
            <summary>
            Gets the awaiter.
            </summary>
            <param name="taskOpt">The task opt.</param>
            <returns></returns>
            2024/1/2 16:01
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter(System.ValueTuple{System.Threading.Tasks.Task,System.TimeSpan})">
            <summary>
            Gets the awaiter.
            </summary>
            <param name="taskOpt">The task opt.</param>
            <returns></returns>
            2024/1/2 16:01
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter``2(System.ValueTuple{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1">The type of the 1.</typeparam>
            <param name="tasks">The tasks.</param>
            <returns></returns>
            2023/11/27 8:07
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter``3(System.ValueTuple{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2}})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <param name="tasks">The tasks.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter``4(System.ValueTuple{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3}})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <param name="tasks">The tasks.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.TaskExtensions.GetAwaiter``5(System.ValueTuple{System.Threading.Tasks.Task{``0},System.Threading.Tasks.Task{``1},System.Threading.Tasks.Task{``2},System.Threading.Tasks.Task{``3},System.Threading.Tasks.Task{``4}})">
            <summary>
            Gets the awaiter.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="T1">The type of the 1.</typeparam>
            <typeparam name="T2">The type of the 2.</typeparam>
            <typeparam name="T3">The type of the 3.</typeparam>
            <typeparam name="T4">The type of the 4.</typeparam>
            <param name="tasks">The tasks.</param>
            <returns></returns>
        </member>
    </members>
</doc>
