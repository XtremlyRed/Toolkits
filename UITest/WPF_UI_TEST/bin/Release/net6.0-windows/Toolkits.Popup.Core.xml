<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Toolkits.Popup.Core</name>
    </assembly>
    <members>
        <member name="T:Toolkits.RequestCloseEventHandler">
            <summary>
            request close popup event
            </summary>
            <param name="sender">sender</param>
            <param name="args">args</param>
        </member>
        <member name="T:Toolkits.IPopupAware">
            <summary>
            popup content aware to view close event
            </summary>
        </member>
        <member name="M:Toolkits.IPopupAware.OnPopupClosed">
            <summary>
            on popup closed
            </summary>
        </member>
        <member name="M:Toolkits.IPopupAware.OnPopupOpened(Toolkits.Parameters)">
            <summary>
            on popup opened
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="E:Toolkits.IPopupAware.RequestCloseEvent">
            <summary>
            request close popup
            </summary>
        </member>
        <member name="T:Toolkits.IPopupManager">
            <summary>
            a class of <see cref="T:Toolkits.IPopupManager"/>
            </summary>
        </member>
        <member name="M:Toolkits.IPopupManager.ShowAsync(System.String,System.String,System.String[])">
            <summary>
            show message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/>,
            when using, there must be a popup container with the <see cref="!:PopupManager.IsMainContainerProperty"/> attribute set to true
            </summary>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IPopupManager.ComfirmAsync(System.String,System.String,System.String[])">
            <summary>
            comfirm message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/>
            when using, there must be a popup container with the <code><see cref="!:PopupManager.IsMainContainerProperty"/></code>  attribute set to true
            </summary>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <returns>the content of a clicked button</returns>
        </member>
        <member name="M:Toolkits.IPopupManager.ComfirmAsync(System.String,System.String,System.String[],System.Int32)">
             <summary>
            
             when using, there must be a popup container with the <see cref="!:PopupManager.IsMainContainerProperty"/> attribute set to true
             </summary>
             <param name="message">the message content of the pop-up box</param>
             <param name="title">the title of the pop-up box</param>
             <param name="buttonContents">the button contents of the pop-up box</param>
             <param name="expectedClickIndex">expected click index of the (see parameter: <paramref name="buttonContents"/>).</param>
             <returns></returns>
        </member>
        <member name="M:Toolkits.IPopupManager.ShowAsyncIn(System.String,System.String,System.String,System.String[])">
            <summary>
            show message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/> from <paramref name="containerName"/>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IPopupManager.ComfirmAsyncIn(System.String,System.String,System.String,System.String[])">
            <summary>
            comfirm message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/> from <paramref name="containerName"/>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IPopupManager.ComfirmAsyncIn(System.String,System.String,System.String,System.String[],System.Int32)">
            <summary>
            comfirm message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/> from <paramref name="containerName"/>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <param name="expectedClickIndex">expected click index of the (see parameter: <paramref name="buttonContents"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IPopupManager.PopupAsync(System.Object,Toolkits.Parameters)">
            <summary>
            popup view with <paramref name="parameters"/> from  main container
            when using, there must be a popup container with the <see cref="!:PopupManager.IsMainContainerProperty"/> attribute set to true
            </summary>
            <param name="view">view</param>
            <param name="parameters">parameters</param>
            <returns></returns>d
        </member>
        <member name="M:Toolkits.IPopupManager.PopupAsync(System.Func{System.Object},Toolkits.Parameters)">
            <summary>
            popup view with <paramref name="parameters"/> from  main container
            when using, there must be a popup container with the <see cref="!:PopupManager.IsMainContainerProperty"/> attribute set to true
            </summary>
            <param name="viewCreator">view creator</param>
            <param name="parameters">parameters</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IPopupManager.PopupAsyncIn(System.String,System.Object,Toolkits.Parameters)">
            <summary>
            popup view with <paramref name="parameters"/> from <paramref name="containerName"/>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="view">view</param>
            <param name="parameters">parameters</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.IPopupManager.PopupAsyncIn(System.String,System.Func{System.Object},Toolkits.Parameters)">
            <summary>
            popup view with <paramref name="parameters"/> from <paramref name="containerName"/>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="viewCreator">view creator</param>
            <param name="parameters">parameters</param>
            <returns></returns>
        </member>
        <member name="T:Toolkits.Parameters">
            <summary>
            a class of <see cref="T:Toolkits.Parameters"/>
            </summary>
        </member>
        <member name="M:Toolkits.Parameters.SetValue(System.String,System.Object)">
            <summary>
            set value into <see cref="T:Toolkits.Parameters"/>
            </summary>
            <param name="parameterKey">parameterKey</param>
            <param name="parameterValue">parameterValue</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Toolkits.Parameters.GetValue``1(System.String,``0@)">
            <summary>
            get value from <see cref="T:Toolkits.Parameters"/>
            </summary>
            <typeparam name="Target"></typeparam>
            <param name="parameterKey">parameterKey</param>
            <param name="parameterValue">parameterValue</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Toolkits.Parameters.TryGetValue``1(System.String,``0@)">
            <summary>
            try get value from <see cref="T:Toolkits.Parameters"/>
            </summary>
            <typeparam name="Target"></typeparam>
            <param name="parameterKey">parameterKey</param>
            <param name="parameterValue">parameterValue</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Toolkits.Parameters.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal toType the current object.
            </summary>
            <param name="obj"> The object toType compare with the current object.</param>
            <returns>true if the specified object is equal toType the current object; otherwise, false.</returns>
        </member>
        <member name="M:Toolkits.Parameters.GetHashCode">
            <summary>
             Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Toolkits.Parameters.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
    </members>
</doc>
