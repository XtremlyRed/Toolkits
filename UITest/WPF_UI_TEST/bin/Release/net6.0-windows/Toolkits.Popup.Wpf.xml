<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Toolkits.Popup.Wpf</name>
    </assembly>
    <members>
        <member name="T:Toolkits.Popup.PopupManager">
            <summary>
            a class of <see cref="T:Toolkits.Popup.PopupManager"/>
            </summary>
        </member>
        <member name="F:Toolkits.Popup.PopupManager.adornerDecorators">
            <summary>
            all elements that can be popup container
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.ShowAsync(System.String,System.String,System.String[])">
            <summary>
            show message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/>,
            when using, there must be a popup container with the <see cref="F:Toolkits.Popup.PopupManager.IsMainContainerProperty"/> attribute set to true
            </summary>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.ComfirmAsync(System.String,System.String,System.String[])">
            <summary>
            comfirm message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/>
            when using, there must be a popup container with the <code><see cref="F:Toolkits.Popup.PopupManager.IsMainContainerProperty"/></code>  attribute set to true
            </summary>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <returns>the content of a clicked button</returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.ComfirmAsync(System.String,System.String,System.String[],System.Int32)">
             <summary>
            
             when using, there must be a popup container with the <see cref="F:Toolkits.Popup.PopupManager.IsMainContainerProperty"/> attribute set to true
             </summary>
             <param name="message">the message content of the pop-up box</param>
             <param name="title">the title of the pop-up box</param>
             <param name="buttonContents">the button contents of the pop-up box</param>
             <param name="expectedClickIndex">expected click index of the (see parameter: <paramref name="buttonContents"/>).</param>
             <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.ShowAsyncIn(System.String,System.String,System.String,System.String[])">
            <summary>
            show message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/> from <paramref name="containerName"/>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.ComfirmAsyncIn(System.String,System.String,System.String,System.String[])">
            <summary>
            comfirm message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/> from <paramref name="containerName"/>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.ComfirmAsyncIn(System.String,System.String,System.String,System.String[],System.Int32)">
            <summary>
            comfirm message with <paramref name="message"/>,<paramref name="title"/>,<paramref name="buttonContents"/> from <paramref name="containerName"/>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="message">the message content of the pop-up box</param>
            <param name="title">the title of the pop-up box</param>
            <param name="buttonContents">the button contents of the pop-up box</param>
            <param name="expectedClickIndex">expected click index of the (see parameter: <paramref name="buttonContents"/>).</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.PopupAsync(System.Object,Toolkits.Parameters)">
            <summary>
            <para> popup view with <paramref name="parameters"/> from  main container</para>
            <para> when using, there must be a popup container with the <see cref="F:Toolkits.Popup.PopupManager.IsMainContainerProperty"/> attribute set to true</para>
            <para> The <paramref name="view"/> type or the view model type bound to it must inherit from <see cref="T:Toolkits.IPopupAware"/> to obtain support for closing popup</para>
            </summary>
            <param name="view">view</param>
            <param name="parameters">parameters</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.PopupAsync(System.Func{System.Object},Toolkits.Parameters)">
            <summary>
            <para> popup view with <paramref name="parameters"/> from  main container</para>
            <para> when using, there must be a popup container with the <see cref="F:Toolkits.Popup.PopupManager.IsMainContainerProperty"/> attribute set to true</para>
            <para> The <see cref="T:System.Object"/> type or the view model type bound to it must inherit from <see cref="T:Toolkits.IPopupAware"/> to obtain support for closing popup</para>
            </summary>
            <param name="viewCreator">view creator</param>
            <param name="parameters">parameters</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.PopupAsyncIn(System.String,System.Object,Toolkits.Parameters)">
            <summary>
            popup view with <paramref name="parameters"/> from <paramref name="containerName"/>
            <para> when using, there must be a popup container with the <see cref="F:Toolkits.Popup.PopupManager.IsMainContainerProperty"/> attribute set to true</para>
            <para> The <paramref name="view"/> type or the view model type bound to it must inherit from <see cref="T:Toolkits.IPopupAware"/> to obtain support for closing popup</para>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="view">view</param>
            <param name="parameters">parameters</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.PopupAsyncIn(System.String,System.Func{System.Object},Toolkits.Parameters)">
            <summary>
            popup view with <paramref name="parameters"/> from <paramref name="containerName"/>
            <para> when using, there must be a popup container with the <see cref="F:Toolkits.Popup.PopupManager.IsMainContainerProperty"/> attribute set to true</para>
            <para> The <see cref="T:System.Object"/>  type or the view model type bound to it must inherit from <see cref="T:Toolkits.IPopupAware"/> to obtain support for closing popup</para>
            </summary>
            <param name="containerName">popup <paramref name="containerName"/></param>
            <param name="viewCreator">view creator</param>
            <param name="parameters">parameters</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.ButtonContentsCheck(System.String[],System.Int32)">
            <summary>
            Buttons the contents check.
            </summary>
            <param name="buttonContents">The button contents.</param>
            <param name="expectedClickIndex">Expected index of the click.</param>
            <exception cref="T:System.ArgumentNullException">buttonContents - the display content of the buttons has not been configured</exception>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.PopupContainerCheck(System.Boolean,System.Windows.Documents.AdornerDecorator@)">
            <summary>
            Popups the container check.
            </summary>
            <param name="searchMain">if set to <c>true</c> [search main].</param>
            <param name="adornerDecorator">The adorner decorator.</param>
            <exception cref="T:System.Exception">
            PopupManager: No popup container found.
            or
            PopupManager: the main container was not found or the main container name is empty
            </exception>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.PopupContainerCheck(System.String,System.Windows.Documents.AdornerDecorator@)">
            <summary>
            Popups the container check.
            </summary>
            <param name="containerName">Name of the container.</param>
            <param name="adornerDecorator">The adorner decorator.</param>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.GetContainerName(System.Windows.Documents.AdornerDecorator)">
            <summary>
            get popup container name
            </summary>
            <param name="adornerDecorator"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.SetContainerName(System.Windows.Documents.AdornerDecorator,System.String)">
            <summary>
            set popup container name
            </summary>
            <param name="adornerDecorator"></param>
            <param name="popupContainerName"></param>
        </member>
        <member name="F:Toolkits.Popup.PopupManager.ContainerNameProperty">
            <summary>
            popup container name
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.GetMaskBrush(System.Windows.Documents.AdornerDecorator)">
            <summary>
            get mask maskBrush of popup container
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.SetMaskBrush(System.Windows.Documents.AdornerDecorator,System.Windows.Media.Brush)">
            <summary>
            set mask maskBrush of popup container
            </summary>
            <param name="element"></param>
            <param name="maskBrush"></param>
        </member>
        <member name="F:Toolkits.Popup.PopupManager.MaskBrushProperty">
            <summary>
            mask maskBrush of popup container
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.GetIsMainContainer(System.Windows.Documents.AdornerDecorator)">
            <summary>
            get popup container is main container
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.SetIsMainContainer(System.Windows.Documents.AdornerDecorator,System.Boolean)">
            <summary>
            set popup container is main container
            </summary>
            <param name="element"></param>
            <param name="isMainContainer"></param>
        </member>
        <member name="F:Toolkits.Popup.PopupManager.IsMainContainerProperty">
            <summary>
            is main container
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.GetMessageContainerType(System.Windows.Documents.AdornerDecorator)">
            <summary>
            get message container type
            This type must inherit <see cref="T:Toolkits.Popup.PopupMessageViewBase"/>
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.SetMessageContainerType(System.Windows.Documents.AdornerDecorator,System.Type)">
            <summary>
            set message container type
            This type must inherit <see cref="T:Toolkits.Popup.PopupMessageViewBase"/>
            and must contain an parameterless constructor
            </summary>
            <param name="element"></param>
            <param name="messageContainerType"></param>
        </member>
        <member name="F:Toolkits.Popup.PopupManager.MessageContainerTypeProperty">
            <summary>
            message container type
            This type must inherit <see cref="T:Toolkits.Popup.PopupMessageViewBase"/>
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.GetToastContainerType(System.Windows.Documents.AdornerDecorator)">
            <summary>
            get toast container type
            This type must inherit <see cref="T:Toolkits.Popup.PopupToastViewBase"/>
            </summary>
            <param name="adornerDecorator"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.SetToastContainerType(System.Windows.Documents.AdornerDecorator,System.Type)">
            <summary>
            set toast container type
            This type must inherit <see cref="T:Toolkits.Popup.PopupToastViewBase"/>
            and must contain an parameterless constructor
            </summary>
            <param name="adornerDecorator"></param>
            <param name="toastContainerType"></param>
        </member>
        <member name="F:Toolkits.Popup.PopupManager.ToastContainerTypeProperty">
            <summary>
            toast container type
            This type must inherit <see cref="T:Toolkits.Popup.PopupToastViewBase"/>
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object.</param>
            <returns>true if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.GetHashCode">
            <summary>
             Serves as the default hash function.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.GetPopupAdornerContainer(System.Windows.DependencyObject)">
            <summary>
            get mask maskBrush of popup container
            </summary>
            <param name="adornerDecorator"></param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.SetPopupAdornerContainer(System.Windows.DependencyObject,Toolkits.Popup.Assist.PopupAdorner)">
            <summary>
            set mask maskBrush of popup container
            </summary>
            <param name="element"></param>
            <param name="grid"></param>
        </member>
        <member name="F:Toolkits.Popup.PopupManager.PopupAdornerContainerProperty">
            <summary>
            mask maskBrush of popup container
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupManager.SetPopupTheme(System.Boolean)">
            <summary>
            Determines whether [is dark theme] [the specified is dark theme].
            </summary>
            <param name="isDarkTheme">if set to <c>true</c> [is dark theme].</param>
        </member>
        <member name="T:Toolkits.Popup.PopupMessageViewBase">
            <summary>
            The base class for all message popup views.
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupMessageViewBase.SetPopupMessageInfo(System.String,System.String,System.String[])">
            <summary>
            Set pop-up information, title, and button content
            </summary>
            <param name="message">Popup message</param>
            <param name="title">Popup Title</param>
            <param name="buttonContents">Popup Button Contents</param>
        </member>
        <member name="M:Toolkits.Popup.PopupMessageViewBase.SetCurrentClickContent(System.String)">
            <summary>
            Set the content of the currently clicked button,
            which must be set through the parameter <c>buttonContents</c> of method <see cref="M:Toolkits.Popup.PopupMessageViewBase.SetPopupMessageInfo(System.String,System.String,System.String[])"/>
            </summary>
            <param name="currentClickContent"></param>
        </member>
        <member name="T:Toolkits.Popup.PopupToastViewBase">
            <summary>
            The base class for all toast popup views.
            </summary>
        </member>
        <member name="M:Toolkits.Popup.PopupToastViewBase.SetToastInfo(System.String,System.String,System.Object[])">
            <summary>
            Sets the toast information.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupToastViewBase.SetToastContent(System.String,System.String,System.Int32,System.Object[])">
            <summary>
            Sets the content of the toast.
            </summary>
            <param name="title">The title.</param>
            <param name="message">The message.</param>
            <param name="displayTimeSpan_Ms">The display time span ms.</param>
            <param name="objects">The objects.</param>
            <returns></returns>
        </member>
        <member name="M:Toolkits.Popup.PopupToastViewBase.CloseToast">
            <summary>
            request close this toast
            </summary>
        </member>
        <member name="T:Toolkits.Popup.MessageView">
            <summary>
            MessageView.xaml
            </summary>
        </member>
        <member name="M:Toolkits.Popup.MessageView.SetPopupMessageInfo(System.String,System.String,System.String[])">
            <summary>
            </summary>
            <param name="message"></param>
            <param name="title"></param>
            <param name="buttonContents"></param>
        </member>
        <member name="M:Toolkits.Popup.MessageView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Toolkits.Popup.ToastView">
            <summary>
            ToastView.xaml
            </summary>
        </member>
        <member name="M:Toolkits.Popup.ToastView.#ctor">
             <summary>
            
             </summary>
        </member>
        <member name="M:Toolkits.Popup.ToastView.SetToastInfo(System.String,System.String,System.Object[])">
            <summary>
            set toast message info
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <param name="objects"></param>
        </member>
        <member name="M:Toolkits.Popup.ToastView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
